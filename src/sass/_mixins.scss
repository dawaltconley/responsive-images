@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

$prefix: image !default;
$image-queries: meta.get-function('#{$prefix}-queries');

// from @dawaltconley/sass/functions/_lists.scss
@function join-str($list, $str: '') {
  $return: '';
  @for $i from 1 to list.length($list) {
    $return: $return + list.nth($list, $i) + $str;
  }
  $return: $return + list.nth($list, list.length($list));
  @return $return;
}

// mixin to work with output of resize-image() function and build.$queries
@function permute($matrix, $permutations: (), $a: ()) {
  @if (list.length($a) == list.length($matrix)) {
    @return list.append($permutations, $a);
  }

  $row: list.nth($matrix, list.length($a) + 1);

  @each $item in $row {
    $permutations: permute($matrix, $permutations, list.append($a, $item));
  }

  @return $permutations;
}

@mixin bg($src, $prepend-backgrounds: (), $append-backgrounds: (), $kwargs...) {
  $queries: meta.call($image-queries, $src, $kwargs...);
  @each $selectors, $images in $queries {
    @media #{$selectors} {
      $fallback: list.nth($images, -1);
      $fallback: url('#{map.get($fallback, 'image')}');
      $fallback: list.join(
        $prepend-backgrounds,
        $fallback,
        $separator: comma,
        $bracketed: false
      );
      $fallback: list.join(
        $fallback,
        $append-backgrounds,
        $separator: comma,
        $bracketed: false
      );

      @if list.length($images) > 1 {
        $image-set: ();
        @each $img in $images {
          $image: (url('#{map.get($img, image)}'));
          $dppx: map.get($img, dppx);
          @if ($dppx) {
            $image: list.append($image, '#{$dppx}x', $separator: space);
          }
          $type: map.get($img, type);
          @if ($type) {
            $image: list.append($image, type('#{$type}'), $separator: space);
          }
          $image-set: list.append($image-set, $image, $separator: comma);
        }
        $image-set: image-set(#{$image-set});
        $image-set: list.join(
          $prepend-backgrounds,
          $image-set,
          $separator: comma,
          $bracketed: false
        );
        $image-set: list.join(
          $image-set,
          $append-backgrounds,
          $separator: comma,
          $bracketed: false
        );

        background-image: $image-set;
      } @else {
        background-image: $fallback;
      }
    }
  }
}
